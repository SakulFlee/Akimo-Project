# To save on build minutes and to reduce complexity 
# we are **only** building for the current host architecture for Windows, Linux and macOS.
# Android and iOS are exceptions here.
#
# We could of course add all of our target architectures
# by simply adding the `--target <rust target>` to the build commands.
# Alternatively, use a build matrix like we did with GitHub.

version: 2.1

orbs: 
  windows: circleci/windows@4.1.1

workflows:
  build:
    jobs:
      - platform_linux
      - platform_macos
      - platform_windows
      - platform_android
      - platform_ios
      - shared

jobs:
  platform_linux:
    docker:
      - image: cimg/rust:1.61

    steps:
      - checkout
      - run: cargo --version

      # Build
      - run:
          name: Build (debug)
          command: cargo build --package platform_linux
      - run:
          name: Build (release)
          command: cargo build --package platform_linux --release

      # Tests
      - run:
          name: Run Tests (debug)
          command: cargo test --package platform_linux
      - run:
          name: Run Tests (release)
          command: cargo test --package platform_linux --release

      # Upload Artifacts
      - store_artifacts:
          path: target/

  platform_macos:
    macos:
      xcode: 13.4.1

    steps:
      - checkout

      # Setup
      - run: 
          name: Install Rust
          command: curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable --profile complete -y
      - run: cargo --version

      # Build
      - run:
          name: Build (debug)
          command: cargo build --package platform_macos
      - run:
          name: Build (release)
          command: cargo build --package platform_macos --release

      # Tests
      - run:
          name: Run Tests (debug)
          command: cargo test --package platform_macos
      - run:
          name: Run Tests (release)
          command: cargo test --package platform_macos --release

      # Upload Artifacts
      - store_artifacts:
          path: target/

  platform_windows:
    executor: 
      name: windows/default

    steps:
      - checkout
      
      # Setup
      - run:
          name: Download RustUp
          command: Invoke-WebRequest https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe -OutFile rustup-init.exe
      - run:
          name: Install Rust
          command: ./rustup-init.exe --default-toolchain stable --profile complete -y
      - run: cargo --version

      # Build
      - run:
          name: Build (debug)
          command: cargo build --package platform_windows
          environment:
            CARGO_NET_GIT_FETCH_WITH_CLI: "true"
      - run:
          name: Build (release)
          command: cargo build --package platform_windows --release
          environment:
            CARGO_NET_GIT_FETCH_WITH_CLI: "true"

      # Tests
      - run:
          name: Run Tests (debug)
          command: cargo test --package platform_windows
          environment:
            CARGO_NET_GIT_FETCH_WITH_CLI: "true"
      - run:
          name: Run Tests (release)
          command: cargo test --package platform_windows --release
          environment:
            CARGO_NET_GIT_FETCH_WITH_CLI: "true"

      # Upload Artifacts
      - store_artifacts:
          path: target/

  platform_android:
    docker:      
      - image: androidsdk/android-30

    steps:
      - checkout

      # Setup
      - run: 
          name: Install GCC
          command: apt-get update && apt-get install -y gcc
      - run: 
          name: Install Android SDKs, NDKs and tools
          command: sdkmanager 'platforms;android-30' 'platform-tools' 'ndk;24.0.8215888' 'build-tools;33.0.0'
      - run: 
          name: Install Rust
          command: curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable --profile complete -y
      - run: source $HOME/.cargo/env && cargo --version
      - run: 
          name: Install Rust targets
          command: source $HOME/.cargo/env && rustup target add armv7-linux-androideabi aarch64-linux-android i686-linux-android x86_64-linux-android
      - run: 
          name: Install cargo-apk
          command: source $HOME/.cargo/env && cargo install cargo-apk
      
      # Build
      - run: 
          name: Build (debug)
          command: unset ANDROID_HOME && export ANDROID_NDK_ROOT="$ANDROID_SDK_ROOT/ndk/24.0.8215888" && source $HOME/.cargo/env && cargo apk build --verbose --package platform_android
      - run: 
          name: Build (release)
          command: unset ANDROID_HOME && export ANDROID_NDK_ROOT="$ANDROID_SDK_ROOT/ndk/24.0.8215888" && source $HOME/.cargo/env && cargo apk build --verbose --package platform_android --release

      # There are no tests we can run on android like this

      # Upload Artifacts
      - store_artifacts:
          path: target/

  platform_ios:
    macos:
      xcode: 13.4.1

    steps:
      - checkout
      
      # Setup
      - run:
          name: Install Brew
          command: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      - run:
          name: Install XCodeGen
          command: brew install xcodegen
      - run:
          name: Install JQ
          command: brew install jq
      - run: 
          name: Install Rust
          command: curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable --profile complete -y
      - run:
          name: Install Rust targets
          command: rustup target add x86_64-apple-ios aarch64-apple-ios aarch64-apple-ios-sim
      - run:
          name: Install Cargo-XCodeBuild
          command: cargo install cargo-xcodebuild
      - run: cargo --version

      - run:
          name: Copy original Cargo.toml
          command: cp platform/ios/Cargo.toml platform/ios/Cargo.toml.original
      - run:
          name: Available Device IDs
          command: xcrun simctl list devices available --json ios | jq '.devices | to_entries | map(select(.key | match(".*iOS.*"))) | map(.value)[0]'
      - run:
          name: Selected Device ID
          command: xcrun simctl list devices available --json ios | jq '.devices | to_entries | map(select(.key | match(".*iOS.*"))) | map(.value)[0][0]'
      - run:
          name: Change Device ID
          command: DEVICE_ID=$(xcrun simctl list devices available --json ios | jq '.devices | to_entries | map(select(.key | match(".*iOS.*"))) | map(.value)[0][0].udid'); cat platform/ios/Cargo.toml | sed "s/device_id = .*/device_id = $DEVICE_ID/g" | tee platform/ios/Cargo.toml
      - run:
          name: Diff changes in Cargo.toml
          command: diff platform/ios/Cargo.toml platform/ios/Cargo.toml.original || true

      # Build
      - run:
          name: Build (debug)
          command: cargo xcodebuild build --package platform_ios
      - run:
          name: Build (release)
          command: cargo xcodebuild build --package platform_ios --release

      # There are no tests we can run on android like this

      # Upload Artifacts
      - store_artifacts:
          path: target/

  shared:
    docker:
      - image: cimg/rust:1.61

    steps:
      - checkout
      - run: cargo --version

      # Build
      - run:
          name: Build (debug)
          command: cargo build --package shared
      - run:
          name: Build (release)
          command: cargo build --package shared --release

      # Tests
      - run:
          name: Run Tests (debug)
          command: cargo test --package shared
      - run:
          name: Run Tests (release)
          command: cargo test --package shared --release

      # Upload Artifacts
      - store_artifacts:
          path: target/
