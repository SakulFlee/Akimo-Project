name: Multiplatform Build

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  libary:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache target/
        id: target-cache
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-target

      - name: Install Rust on Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: Invoke-WebRequest https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe -OutFile rustup-init.exe; ./rustup-init.exe --default-toolchain stable --profile minimal -y
      - name: Install Rust on UNIX (Linux & macOS)
        if: ${{ matrix.os != 'windows-latest' }}
        run: curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable --profile minimal -y

      - name: Build
        run: cargo build --verbose --package wgpu_engine

      - name: Build Examples
        run: cargo build --verbose --package wgpu_engine --examples
      
      - name: Run Tests
        run: cargo test --verbose --no-default-features --no-fail-fast --package wgpu_engine --release

      - uses: actions/upload-artifact@v3
        with:
          name: "wgpu_engine_debug_${{ matrix.os }}"
          path: |
            target/debug/wgpu_engine*

  clippy:
    needs: libary
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache target/
        id: target-cache
        uses: actions/cache@v3
        with:
          path: target
          key: wgpu_engine-${{ runner.os }}-target

      - name: Install Rust
        run: curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable --profile minimal -y

      - name: Install Clippy
        run: rustup component add clippy

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings -W clippy::all
