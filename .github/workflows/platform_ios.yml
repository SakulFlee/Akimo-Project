name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  platform_ios:
    strategy:
      matrix:
        os: [macos-latest]
        # No target needed here.
        # xcodebuild automatically builds for all architectures and compresses them into one APP
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Install Rust
      run: curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable --profile minimal -y

    - name: Install target x86_64-apple-ios
      run: rustup target add x86_64-apple-ios
    - name: Install target aarch64-apple-ios
      run: rustup target add aarch64-apple-ios
    - name: Install target aarch64-apple-ios-sim
      run: rustup target add aarch64-apple-ios-sim

    - name: Install cargo-xcodebuild
      run: cargo install cargo-xcodebuild

    - name: Install XCodeGen
      run: brew install xcodegen

    - name: Check
      run: cargo xcodebuild check --verbose --package platform_ios
    - name: Build (Debug)
      run: cargo xcodebuild build --verbose --package platform_ios
    - name: Build (Release)
      run: cargo xcodebuild build --verbose --package platform_ios --release
    # Testing can't be done on iOS.
    # However, we are testing on the `shared` code and other architectures.

    - uses: actions/upload-artifact@v3
      with:
        name: platform_ios
        path: target/
