name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  platform_windows:
    strategy:
      matrix:
        os: [windows-latest]
        target: [i686-pc-windows-msvc, x86_64-pc-windows-msvc, aarch64-pc-windows-msvc, i586-pc-windows-msvc]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Install Rust
      run: Invoke-WebRequest https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe -OutFile rustup-init.exe; ./rustup-init.exe --default-toolchain stable --profile minimal -y

    - name: Install target ${{ matrix.target }}
      run: rustup target add ${{ matrix.target }}

    - name: Check
      run: cargo check --verbose --package platform_windows --target ${{ matrix.target }}
    - name: Build (Debug)
      run: cargo build --verbose --package platform_windows --target ${{ matrix.target }}
    - name: Build (Release)
      run: cargo build --verbose --package platform_windows --target ${{ matrix.target }} --release
    - name: Run Tests (Debug)
      if: ${{ matrix.target == 'x86_64-pc-windows-msvc' }} # Testing can only be done on the host architecture. It should work across all architectures though!
      run: cargo test --verbose --package platform_windows --target ${{ matrix.target }}
    - name: Run Tests (Release)
      if: ${{ matrix.target == 'x86_64-pc-windows-msvc' }} # Testing can only be done on the host architecture. It should work across all architectures though!
      run: cargo test --verbose --package platform_windows --target ${{ matrix.target }} --release

    - uses: actions/upload-artifact@v3
      with:
        name: platform_windows_${{ matrix.target }}
        path: target/
