pipeline {
    agent {
        label 'docker'
    }
    options {
        disableConcurrentBuilds()
    }
    stages {
        stage('Docker :: Rust Versions') {
            agent {
                docker { 
                    image 'rust:latest' 
                    reuseNode true
                }
            }
            steps {
                sh 'rustc --version'
                sh 'cargo --version'
                sh 'rustup --version'
            }
        }
        stage('Docker :: Rust Check') {
            agent {
                docker { 
                    image 'rust:latest' 
                    reuseNode true
                }
            }
            steps {
                sh 'cargo check'
            }
        }
        stage('Docker :: Rust Build') {
            parallel {
                stage('Docker :: Rust Build (Debug)') {
                    agent {
                        docker { 
                            image 'rust:latest' 
                            reuseNode true
                        }
                    }
                    steps {
                        sh 'cargo build'
                    }
                }
                stage('Docker :: Rust Build (Release)') {
                    agent {
                        docker { 
                            image 'rust:latest' 
                            reuseNode true
                        }
                    }
                    steps {
                        sh 'cargo build --release'
                    }
                }
            }
        }
        stage('Rust :: Rust Versions') {
            agent {
                label 'docker'
            }
            steps {
                sh 'rustc --version'
                sh 'cargo --version'
                sh 'rustup --version'
            }
        }
        stage('Rust :: Rust Check') {
            agent {
                label 'docker'
            }
            steps {
                sh 'cargo check'
            }
        }
        stage('Rust :: Rust Build') {
            parallel {
                stage('Rust :: Rust Build (Debug)') {
                    agent {
                        label 'docker'
                    }
                    steps {
                        sh 'cargo build'
                    }
                }
                stage('Rust :: Rust Build (Release)') {
                    agent {
                        label 'docker'
                    }
                    steps {
                        sh 'cargo build --release'
                    }
                }
            }
        }
    }
}